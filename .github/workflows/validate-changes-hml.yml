name: Validate Pull Request - HML
on:
  pull_request:
    branches:
      - hml
    paths:
      - 'force-app/**'
  workflow_dispatch:
    inputs:
      deploy_strategy:
        description: 'Escolha a estratégia de deploy'
        required: true
        default: 'delta'
        type: choice
        options:
          - delta
          - full

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar dependências do sistema e do Salesforce CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl jq yq
          npm install @salesforce/cli --global

      - name: Autenticar com a org HML
        run: |
          echo "${{ secrets.AUTH_URL_HML }}" > sfdx-auth-url.txt
          sf org login sfdx-url -f sfdx-auth-url.txt --alias hml

      - name: Instalar plugin sfdx-git-delta
        run: echo "y" | sf plugins install sfdx-git-delta

      - name: Definir estratégia de deploy
        run: |
          STRATEGY="${{ github.event.inputs.deploy_strategy }}"
          echo "Estratégia de deploy: $STRATEGY"
          echo "DEPLOY_STRATEGY=$STRATEGY" >> $GITHUB_ENV

      - name: Criar diretório de saída para o pacote delta
        if: env.DEPLOY_STRATEGY == 'delta'
        run: mkdir -p deploy

      - name: Gerar pacote delta no diretório deploy
        if: env.DEPLOY_STRATEGY == 'delta'
        run: |
          sf sgd source delta --from origin/hml --to HEAD --output-dir deploy

      - name: Implantar usando o pacote delta gerado
        if: env.DEPLOY_STRATEGY == 'delta'
        run: |
          sf project deploy start --manifest deploy/package/package.xml --dry-run --test-level NoTestRun --target-org hml > deploy/deploy_output.log || true

      - name: Implantar tudo (Full Deploy)
        if: env.DEPLOY_STRATEGY == 'full'
        run: |
          sf project deploy start --source-dir force-app --dry-run --test-level NoTestRun --target-org hml > deploy/deploy_output.log || true

      - name: Verificar falhas de componentes no log de deploy
        run: |
          if grep -i "Component Failures" deploy/deploy_output.log; then
            echo "Falhas de componente detectadas! O deploy falhou."
            cat deploy/deploy_output.log
            exit 1
          fi

      - name: Exibir o Log de Deploy diretamente no console
        run: |
          echo "Log de Deploy - Erros e Detalhes"
          cat deploy/deploy_output.log

      - name: Definir nome do artefato com org, data e hora
        id: set-artifact-name
        run: |
          ORG_NAME="HML"
          export TZ="America/Sao_Paulo"  # Define o fuso horário para o Brasil (UTC-3)
          TIMESTAMP=$(date +'%d-%m-%Y--%H-%M-%S')  # Gera o timestamp no fuso horário do Brasil
          echo "PACKAGE_XML_ARTIFACT=${ORG_NAME}_Package_xml_${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "DEPLOY_LOG_ARTIFACT=${ORG_NAME}_Validade_log_${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Salvar package.xml
        if: env.DEPLOY_STRATEGY == 'delta'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.PACKAGE_XML_ARTIFACT }}
          path: deploy/package/package.xml

      - name: Salvar o Log de Deploy
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.DEPLOY_LOG_ARTIFACT }}
          path: deploy/deploy_output.log
